const req = new XMLHttpRequest();
req.open("GET", "https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json", true);
req.send();
req.onload = () => {
	//Note: Do NOT stringify or it will become a string and array calls like [0][0] will return the first CHARACTER
	let data = JSON.parse(req.responseText),
		dataset = data.data;

	// Bottom description
	document.getElementById("description").innerHTML = data.description;

	//console.log(dataset);

	let min = new Date(dataset[0][0]),
		max = new Date(dataset[274][0]);
	//console.log(min, max);

	// Relative height and width of the SVG. Actual height and width are defined within CSS and not appended (contrary to what FCC tutorial taught) 
	// Note 2:1 ratio because container ratio is roughly 2:1
	const padding = {
			top: 10,
			bottom: 20,
			left: 50,
			right: 10
		},
		w = 1000 - padding.left - padding.right,
		h = 450 - padding.top - padding.bottom;

	let width = Math.ceil(w / dataset.length);

	//Set scaling
	const xScale = d3.scaleTime() // d3.scaleTime - create a linear scale for time.
		.domain([min, max])
		.range([0, w]);

	const yScale = d3.scaleLinear()
		.domain([0, d3.max(dataset, d => d[1])])
		.range([h, 0]);

	const xAxis = d3.axisBottom(xScale),
		yAxis = d3.axisLeft(yScale);

	// Set SVG dimensions and append axes
	let chart = d3.select("svg")
		.attr("width", w + padding.right + padding.left)
		.attr("height", h + padding.bottom + padding.top)

	chart.append("g")
		.attr("transform", `translate(${padding.left},${h+padding.top})`)
		.call(xAxis);

	chart.append("g")
		.attr("transform", `translate(${padding.left},${padding.top})`)
		.call(yAxis)

	//Append data as bars

	var div = d3.select("#chart").append("div")
		.attr("class", "tooltip")
		.style("opacity", 0);

	chart.selectAll("rect")
		.data(dataset)
		.enter()
		.append("rect")
		.attr("class", "bar")
		.attr("x", d => {
			return xScale(new Date(d[0])) + padding.left;
		})
		.attr("y", d => {
			return yScale(d[1]) + padding.top;
		})
		.attr("height", d => {
			return h - yScale(d[1]);
		})
		.attr("width", width)
		.on("mouseover", d => {
			let rect = d3.select(this);
			rect.attr("class", "highlight");
			let currentDateTime = new Date(d[0]);
			let year = currentDateTime.getFullYear();
			let month = currentDateTime.getMonth();
			let dollars = d[1];
			div.transition()
				.duration(200)
				.style("opacity", 0.9);
			div.html("<span>" + d3.format("$,.2f")(dollars) + "B</span><br><span>" + month + "/" + year + "</span>") // localized fixed-point currency, "(Â£3.50)" https://github.com/d3/d3-format
				.style("left", (d3.event.pageX - 150) + "px") //https://bl.ocks.org/mbostock/1087001
				.style("top", (d3.event.pageY - 100) + "px");
		})
		.on("mouseout", () => {
			let rect = d3.select(this);
			rect.attr("class", "none");
			div.transition()
				.duration(500)
				.style("opacity", 0);
		});

};
